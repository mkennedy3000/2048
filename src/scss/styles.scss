@import "../../bower_components/bootstrap/scss/bootstrap";

$width: 400px;
$tile-count: 4;
$tile-padding: 15px;
$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;
$tile-radius: 4px;

$colors:  #EEE4DA, // 2
          #EAE0C8, // 4
          #F59563, // 8
          #3399ff, // 16
          #ffa333, // 32
          #cef030, // 64
          #E8D8CE, // 128
          #990303, // 256
          #6BA5DE, // 512
          #DCAD60, // 1024
          #B60022; // 2048

@function power ($x, $n) {
  $ret: 1;

  @if $n >= 0 {
    @for $i from 1 through $n {
      $ret: $ret * $x;
    }
  } @else {
    @for $i from $n to 0 {
      $ret: $ret / $x;
    }
  }

  @return $ret;
}

#game {
  position: relative;
  width: $width;
  height: $width;
  padding: $tile-padding;
  cursor: default;
  background: #bbaaa0;
  border-radius: 6px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  .grid-container {
    position: absolute;
    z-index: 1;
    margin: 0 auto;

    .grid-cell {
      width: $tile-size;
      height: $tile-size;
      margin-bottom: $tile-padding;
      margin-right: $tile-padding;
      float: left;
      border-radius: $tile-radius;
    }
  }
  .tile-container {
    position: absolute;
    z-index: 2;

    .tile {
      width: $tile-size;
      height: $tile-size;
      position: absolute;
      transition: 250ms ease-out;
      -webkit-transition-property: -webkit-transform;
      -moz-transition-property: -moz-transform;
      transition-property: transform;
      z-index: 2;

      // Dynamically create .position-#{x}-#{y} classes to mark
      // where each tile will be placed
      @for $x from 1 through $tile-count {
        @for $y from 1 through $tile-count {
          $zeroOffsetX: $x - 1;
          $zeroOffsetY: $y - 1;
          $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);
          $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);

          &.position-#{$zeroOffsetX}-#{$zeroOffsetY} {
            -webkit-transform: translate($newX, $newY);
            transform: translate($newX, $newY);
          }
        }
      }

      @for $i from 1 through length($colors) {
        &.tile-#{power(2, $i)} .tile-inner {
          background: nth($colors, $i)
        }
      }
    }

    .tile-inner {
      height: 100%;
      text-align: center;
      line-height: $tile-size;
      border-radius: $tile-radius;
    }
  }
}

#game-container {
  position: relative;
  width: $width;
  height: $width;
  margin: 0 auto;
}

.game-overlay {
  width: $width;
  height: $width;
  background-color: rgba(255, 255, 255, 0.47);
  position: absolute;
  top: 0;
  left: 0;
  z-index: 10;
  text-align: center;
  padding-top: 35%;
  overflow: hidden;
  box-sizing: border-box;

  .lower {
    display: block;
    margin-top: 29px;
    font-size: 16px;
  }
}

.scores-container {
  padding: 10px;
}

[ng\:cloak], [ng-cloak], .ng-cloak {
  display: none !important;
}